import { NextRequest, NextResponse } from 'next/server';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { z } from 'zod';

// Validation schema
const signUpSchema = z.object({
  leaderName: z.string().min(1, 'Leader name is required'),
  email: z.string().email('Valid email is required'),
  password: z.string().min(6, 'Password must be at least 6 characters'),
  confirmPassword: z.string(),
  teamName: z.string().min(1, 'Team name is required'),
  member1Name: z.string().min(1, 'Member 1 name is required'),
  member2Name: z.string().min(1, 'Member 2 name is required'),
  member3Name: z.string().min(1, 'Member 3 name is required'),
  teamPassword: z.string().min(4, 'Team password must be at least 4 characters'),
  confirmTeamPassword: z.string(),
}).refine((data) => data.password === data.confirmPassword, {
  message: "Passwords don't match",
  path: ["confirmPassword"],
}).refine((data) => data.teamPassword === data.confirmTeamPassword, {
  message: "Team passwords don't match",
  path: ["confirmTeamPassword"],
});

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // Validate request body
    const validatedData = signUpSchema.parse(body);
    
    // TODO: Check if email already exists in database
    // For now, we'll simulate this check
    const existingUser = false; // This would be a database query
    
    if (existingUser) {
      return NextResponse.json(
        { error: 'User with this email already exists' },
        { status: 400 }
      );
    }
    
    // TODO: Check if team name already exists
    const existingTeam = false; // This would be a database query
    
    if (existingTeam) {
      return NextResponse.json(
        { error: 'Team name already taken' },
        { status: 400 }
      );
    }
    
    // Hash passwords
    const hashedPassword = await bcrypt.hash(validatedData.password, 12);
    const hashedTeamPassword = await bcrypt.hash(validatedData.teamPassword, 12);
    
    // Generate unique IDs (in production, these would be generated by the database)
    const userId = `user_${Date.now()}_${Math.random().toString(36).substring(2)}`;
    const teamId = `team_${Date.now()}_${Math.random().toString(36).substring(2)}`;
    
    // Create user and team objects (these would be saved to database)
    const newUser = {
      id: userId,
      name: validatedData.leaderName,
      email: validatedData.email,
      password: hashedPassword,
      isLeader: true,
      teamId: teamId,
      createdAt: new Date().toISOString(),
    };
    
    const newTeam = {
      id: teamId,
      name: validatedData.teamName,
      password: hashedTeamPassword,
      leader: {
        id: userId,
        name: validatedData.leaderName,
        email: validatedData.email,
      },
      members: [
        { id: userId, name: validatedData.leaderName, isLeader: true },
        { id: `member_${Date.now()}_1`, name: validatedData.member1Name, isLeader: false },
        { id: `member_${Date.now()}_2`, name: validatedData.member2Name, isLeader: false },
        { id: `member_${Date.now()}_3`, name: validatedData.member3Name, isLeader: false },
      ],
      createdAt: new Date().toISOString(),
      contestStatus: {
        currentRound: 1,
        round1Completed: false,
        round1Qualified: false,
        round2Completed: false,
        round2Qualified: false,
        finalRank: null,
        finalScore: null,
      }
    };
    
    // TODO: Save to database
    // await db.users.create(newUser);
    // await db.teams.create(newTeam);
    
    // Generate JWT token
    const token = jwt.sign(
      { 
        userId: newUser.id, 
        teamId: newTeam.id, 
        email: newUser.email,
        isLeader: true 
      },
      process.env.JWT_SECRET || 'fallback-secret-for-development',
      { expiresIn: '7d' }
    );
    
    // Return success response (excluding sensitive data)
    const responseUser = {
      id: newUser.id,
      name: newUser.name,
      email: newUser.email,
      isLeader: newUser.isLeader,
      teamId: newUser.teamId,
    };
    
    const responseTeam = {
      id: newTeam.id,
      name: newTeam.name,
      leader: newTeam.leader,
      members: newTeam.members,
      createdAt: newTeam.createdAt,
      contestStatus: newTeam.contestStatus,
    };
    
    const response = NextResponse.json({
      message: 'Team registered successfully',
      user: responseUser,
      team: responseTeam,
    });
    
    // Set HTTP-only cookie
    response.cookies.set('auth-token', token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 60 * 60 * 24 * 7, // 7 days
    });
    
    return response;
    
  } catch (error) {
    console.error('Signup error:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: error.issues[0].message },
        { status: 400 }
      );
    }
    
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
